/*
 * test.c
 *
 *  Created on: ٢٩‏/٠١‏/٢٠٢٤
 *      Author: Nada Waleed
 */
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

unsigned char g_tick = 0 ;
unsigned char count = 0;

unsigned char second = 0;       /* Global variable for Seconds count */
unsigned char minute = 0;       /* Global variable for Minutes count */
unsigned char hour = 0;         /* Global variable for Hours count */
unsigned char Interrupt_Flag = 0;

/*******************Function prototypes *******************/
void INT0_Init(void);
void INT1_Init(void);
void INT2_Init(void);
void Timer1_CTC_Init(void);
void StopWatch_Multiplexing_Mode(void);
void StopWatch_TimeCounting(void);

/************************ISR Functions*********************/
ISR(INT0_vect)
{
	second = 0;
	minute = 0;
	hour = 0;      /* Reset all Stop-Watch digits to start from the beginning again */

	PORTC &= 0xF0;       /* Clear all 7-Segment displays */

	_delay_ms(30);       /* Just a 30ms delay due to Button-debouncing */
}
ISR(INT1_vect)
{
	/* Configure timer control register TCCR1B:
	 * No clock source (Timer/Counter stopped)
	 * CS10=0 CS11=0 CS12=0
	 */
	TCCR1B &= ~(1 << CS10);
	TCCR1B &= ~(1 << CS11);
	TCCR1B &= ~(1 << CS12);
}
ISR(INT2_vect)
{
	/* Configure timer control register TCCR1B:
		 * Clock Source ON again (F_CLK/1024 (From prescaler))
		      CS10=1 CS11=0 CS12=1
		 */

		/* Check if bit (CS10) in register (TCCR1B) is cleared or not */
		if (!(TCCR1B &(1<<CS10)))
		{
			TCCR1B |= (1 << CS10);
		}

		/* Check if bit (CS12) in register (TCCR1B) is cleared or not */
		if (!(TCCR1B &(1<<CS12)))
		{
			TCCR1B |= (1 << CS12);
		}
}
ISR(TIMER1_COMPA_vect)
{
	Interrupt_Flag = 1;    /* Set interrupt flag as an indication of Timer1 interrupt */
}

/***********************Main Function****************************/
int main(){

	 // Set 7447 decoder input pins as output
	    DDRC |= 0x0F;

	    // Set enable/disable pins for the six 7-segment displays as output
	    DDRA |= 0x3F;

	    DDRD &= ~(1 << PD2); //Set INT0 pin as input
	    PORTD |= (1 << PD2); //internal pull-up enabled

	    DDRD &= ~(1 << PD3);   //Set INT1 pin as input
	    PORTD &= ~(1 << PD3);  //internal pull-up enabled

	    DDRB &= ~(1 << PB2);   //Set INT2 pin as input
	    PORTB |= (1 << PB2);   //internal pull-up enabled

	    Timer1_CTC_Init();    /* TIMER1 Compare mode */

	    INT0_Init();          /* INT0 RESET interrupt */
	    INT1_Init();          /* INT1 PAUSE interrupt */
	    INT2_Init();          /* INT2 RESUME interrupt */

	    while (1)
	    	{
	    		StopWatch_Multiplexing_Mode();

	    		if (Interrupt_Flag == 1)
	    		{
	    			StopWatch_TimeCounting();

	    			Interrupt_Flag = 0;     /* Clear flag to be Set when timer interrupt is triggered again */
	    		}
	    	}
	    	return 0;
}

/**********************Function Definition***************/
/*INT0*/
void INT0_Init(void){
	MCUCR &=~(1<<ISC00);// Trigger INT0 with the falling edge
	MCUCR |=(1<<ISC01); // Trigger INT0 with the falling edge
	GICR  |= (1<<INT0); // Enable external interrupt pin INT0
	SREG |=(1<<7);      // Enable interrupts by setting I-bit
}
/*INT1*/
void INT1_Init(void){
	MCUCR |= (1<<ISC11)|(1<<ISC10); // Trigger INT1 with the rising edge
	GICR  |= (1<<INT1);    // Enable external interrupt pin INT1
	SREG  |= (1<<7);       // Enable interrupts by setting I-bit
}
/*INT2*/
void INT2_Init(void){
	MCUCSR &= ~(1<<ISC2);     // Trigger INT2 with the falling edge
	GICR   |= (1<<INT2);	 // Enable external interrupt pin INT2
	SREG   |= (1<<7);        // Enable interrupts by setting I-bit
}
/*Timer1 CTC mode*/
void Timer1_CTC_Init(void)
{
	TCNT1 = 0;              /* Set timer1 initial count to zero */

	OCR1A = 977;            /* Set the Compare value to 977 ( To tigger an interrupt each second ) */

	TIMSK = (1 << OCIE1A);  /* Enable Timer1 Compare A Interrupt */

	/* Configure timer control register TCCR1A:
	 * 1. Clear OC1A/OC1B on compare match (Set output to low level)
	      COM1A1=1 COM1A0=0 COM1B0=0 COM1B1=1

	 * 2. FOC1A=1 FOC1B=0
	 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
	 */
	TCCR1A = (1 << FOC1A) | (1 << COM1A1);

	/* Configure timer control register TCCR1B:
	 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
	 * 2. Prescaler = F_CPU/1024
	      CS10=1 CS11=0 CS12=1
	 */
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10);
}
void StopWatch_Multiplexing_Mode(void)
{
	unsigned int timeDigits[] = {(second % 10),(second / 10),
			                (minute % 10),(minute / 10),
			                (hour % 10),(hour / 10)};      /* Array that contains the Stop-Watch digits */

	for(count = 0; count < 6; count++)
	{

		PORTA = (1 << count);        /* Enable All 7-Segments (one at a time) */

		/* First:  Clearing the display each iteration
		 * Second: Displaying the corresponding count in the enabled 7-Segment
		 */
		PORTC = (PORTC & 0xF0) | timeDigits[count];

		_delay_ms(4);     /* Delay between each 7-segment enable to make the Stop-Watch display looks normal */
	}
}

void StopWatch_TimeCounting(void)
{
	/* Check if Seconds exceeded the range (0 --> 59) or not */
	if (second == 59)
	{
		second = 0;       /* Clear Seconds if exceeded */
		minute++;         /* Increment Mintues */
	}
	else
		second++;         /* Increment Seconds if not exceeded */

	/* Check if Mintues exceeded the range (0 --> 59) or not */
	if (minute > 59)
	{
		minute = 0;      /* Clear Mintues if exceeded */
		hour++;       /* Increment Hours */
	}

	/* Check if Hours exceeded the range (0 --> 23 in one day) or not */
	if (hour > 23)
	{
		hour = 0;    /* Clear Hours if exceeded */
		               /* This case is like a Reset operation when overflow occurs in Stop-Watch timer */
	}
}


